{
	"info": {
		"_postman_id": "fa307c65-3e70-4c2a-a431-9b38f9005c95",
		"name": "Crude_Operation_Dummy_Data",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "19763540"
	},
	"item": [
		{
			"name": "Get_ALL",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Check Google Pixel 6 Pro exists in system\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData[0].name).to.eql(\"Google Pixel 6 Pro\");\r",
							"    pm.expect(jsonData[0].id).to.eql(\"1\");\r",
							"    pm.expect(jsonData[0].data.color).to.eql(\"Cloudy White\");\r",
							"    pm.expect(jsonData[0].data.capacity).to.eql(\"128 GB\");\r",
							"\r",
							"});\r",
							"\r",
							"pm.test(\"Verify number of records\", function(){\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.length).to.eql(13)\r",
							"})\r",
							"\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{base_url}}/objects",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"objects"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create_Obj",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json();\r",
							"var idValue = jsonData.id;\r",
							"var Name = jsonData.name;\r",
							"var  Year = jsonData.data.year;\r",
							"var  Price = jsonData.data.price;\r",
							"\r",
							"pm.environment.set(\"extractedId\",idValue);\r",
							"console.log(\"Extracted ID = \"+idValue);\r",
							"pm.environment.set(\"extractedName\",Name);\r",
							"console.log(\"Extracted Name = \"+Name)\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n   \"name\": \"{{$randomProductMaterial}}\",\r\n   \"data\": {\r\n      \"year\": \"{{$isoTimestamp}}\",\r\n      \"price\": {{$randomPrice}},\r\n      \"CPU model\": \"{{$randomPhoneNumber}}\",\r\n      \"Hard disk size\": \"{{$randomUUID}} TB\"\r\n   }\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}/objects",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"objects"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get_ID",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Verify name of searched ID\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"  pm.expect(jsonData[0].name).to.eql(pm.variables.get(\"extractedName\"));\r",
							"});\r",
							"\r",
							"// pm.test(\"Count of IDs in the response is correct\", function () {\r",
							"//     var jsonData = pm.response.json();\r",
							"//     pm.expect(jsonData.id).to.eql(13);\r",
							"// });\r",
							"\r",
							"// pm.test(\"Each object in the response has an ID\", function () {\r",
							"//   pm.response.json().forEach(function(object) {\r",
							"//     pm.expect(object).to.have.property('id');\r",
							"//   });\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{base_url}}/objects?id={{extractedId}}",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"objects"
					],
					"query": [
						{
							"key": "id",
							"value": "{{extractedId}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Single_ID",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Verify name of searched ID\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"  pm.expect(jsonData.name).to.eql(pm.variables.get(\"extractedName\"));\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{base_url}}/objects/{{extractedId}}",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"objects",
						"{{extractedId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update_Obj",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Your test name\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.id).to.eql(pm.variables.get(\"extractedId\"));\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n   \"name\": \"{{$randomCompanyName}}\",\r\n   \"data\": {\r\n      \"year\": 2019,\r\n      \"price\": 2049.99,\r\n      \"CPU model\": \"Intel Core i9\",\r\n      \"Hard disk size\": \"1 TB\",\r\n      \"color\": \"silver\"\r\n   }\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}/objects/{{extractedId}}",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"objects",
						"{{extractedId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Partially_Update",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Your test name\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.id).to.eql(pm.variables.get(\"extractedId\"));\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n   \"name\": \"Apple MacBook Pro 16 (Updated Name)\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}/objects/{{extractedId}}",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"objects",
						"{{extractedId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete_Obj",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Your test name\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.message).to.eql(\"Object with id = \"+pm.variables.get(\"extractedId\")+\" has been deleted.\");\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}/objects/{{extractedId}}",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"objects",
						"{{extractedId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete_Obj Copy",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 404\", function () {\r",
							"    pm.response.to.have.status(404);\r",
							"});\r",
							"\r",
							"pm.test(\"Check deletion of deleted object\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.error).to.eql(\"Object with id = \"+pm.variables.get(\"extractedId\")+\" doesn't exist.\");\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}/objects/{{extractedId}}",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"objects",
						"{{extractedId}}"
					]
				}
			},
			"response": []
		}
	]
}